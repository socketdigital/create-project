:host(details-accordion) {
  display: block;
}

:host(details-accordion-shadow-dom) {
  padding: 1em;
  display: block;
}

:host(details-accordion-shadow-dom) details > summary {
  cursor: pointer;
}

:host(details-accordion-shadow-dom) details summary > * {
  display: inline;
}

:host(details-open-close-all) {
  padding: 1em;
  display: block;
}

:host(details-open-close-all) details > summary {
  cursor: pointer;
}

:host(details-open-close-all) button {
  background-color: rgba(0, 0, 0, 0);
  border: none;
}

:host(details-pulldown) details > summary {
  cursor: pointer;
  position: relative;
}

:host(details-pulldown) details {
  display: inline-block;
  position: relative;
}

:host(details-pulldown) .pull-down {
  left: 0;
  right: unset;
  z-index: 100;
  position: absolute;
}

:host(details-pulldown[data-position="left"]) .pull-down {
  left: 0;
  right: unset;
}

:host(details-pulldown[data-position="right"]) .pull-down {
  left: unset;
  right: 0;
}

:host(details-pulldown) [open] > summary:before {
  z-index: 80;
  cursor: default;
  content: " ";
  display: block;
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
}

:host(details-pulldown) details > summary {
  color: var(--text);
  background-color: var(--surface);
  padding-inline: var(--padding-inline-small);
  padding-block: var(--padding-block-small);
}

:host(details-pulldown) .pull-down[data-color-scheme="light"] {
  --text: var(--text-light);
  --surface: var(--surface-light);
}

:host(details-pulldown) .pull-down[data-color-scheme="dark"] {
  --text: var(--text-dark);
  --surface: var(--surface-dark);
}

:host(details-pulldown) .pull-down[data-color-scheme="custom"] {
  --text: var(--text-custom);
  --surface: var(--surface-custom);
}

:host(details-pulldown) .pull-down {
  color: var(--text);
  background-color: var(--surface);
  border: var(--border);
  padding-inline: var(--padding-inline-small);
  padding-block: var(--padding-block-small);
  box-shadow: var(--box-shadow);
  min-width: 200px;
}

:host(details-tabs) {
  --details-tabs-height: 200px;
  --_details-tabs-header-text: var(--details-tabs-header-text);
  --_details-tabs-header-surface: var(--details-tabs-header-surface);
  height: var(--details-tabs-height);
  color: var(--text);
  background-color: var(--surface);
  width: 100%;
  display: block;
  container: details-tabs / size;
}

:host(details-tabs) section {
  padding-inline: var(--padding-inline);
  gap: var(--gap);
  color: var(--_details-tabs-header-text);
  background-color: var(--_details-tabs-header-surface);
  display: flex;
}

:host(details-tabs-shadow-dom) {
  --details-tabs-height: 200px;
  --_details-tabs-header-text: var(--details-tabs-header-text);
  --_details-tabs-header-surface: var(--details-tabs-header-surface);
  height: var(--details-tabs-height);
  color: var(--text);
  background-color: var(--surface);
  width: 100%;
  display: block;
  container: details-tabs / size;
}

:host(details-tabs-shadow-dom) section {
  padding-inline: var(--padding-inline);
  gap: var(--gap);
  color: var(--_details-tabs-header-text);
  background-color: var(--_details-tabs-header-surface);
  display: flex;
}

:host(details-tabs-shadow-dom) :root {
  --details-tabs-bar-height: auto;
}

:host(details-tabs-shadow-dom) details summary {
  height: var(--details-tabs-bar-height);
  padding-block: var(--padding-block);
}

:host(details-tabs-shadow-dom) {
  overflow-y: auto;
}

:host(details-tabs-shadow-dom) .details-content {
  z-index: 100;
  height: calc(100cqb - var(--details-tabs-bar-height));
  background-color: var(--surface-custom);
  color: var(--text-custom);
  padding-inline: var(--padding-inline);
  padding-block: var(--padding-block);
  width: 100%;
  position: fixed;
  left: 0;
  overflow-y: auto;
}

:host(details-tabs-shadow-dom) details:not([open]) summary {
  border-bottom: 2px solid rgba(0, 0, 0, 0);
}

:host(details-tabs-shadow-dom) details[open] summary {
  border-bottom: 2px solid #000;
}

:host(details-tabs-shadow-dom) details summary {
  cursor: pointer;
}

:host(details-tabs-shadow-dom) details summary > * {
  display: inline;
}

:host(app-shell) {
  --_sidebar-display: block;
  --_inspector-display: block;
  width: 100%;
  height: 100%;
  display: grid;
  container: app-shell / size;
}

:host(app-shell) section {
  grid-template: "header header header"
                 "sidebar canvas inspector" 1fr
                 "footer footer footer"
                 / auto 1fr auto;
  margin: 0;
  padding: 0;
  display: grid;
}

:host(app-shell[data-area-hidden="sidebar"]) section {
  --_sidebar-display: none;
  grid-template: "header header"
                 "canvas inspector" 1fr
                 "footer footer"
                 / 1fr auto;
}

:host(app-shell[data-area-hidden="inspector"]) section {
  --_inspector-display: none;
  grid-template: "header header"
                 "sidebar canvas" 1fr
                 "footer footer"
                 / auto 1fr;
}

:host(app-shell[data-area-hidden="both"]) section {
  --_sidebar-display: none;
  --_inspector-display: none;
  grid-template: "header"
                 "canvas" 1fr
                 "footer"
                 / 1fr;
}

@container app-shell (width <= 400px) {
  :host(app-shell) section {
    --_sidebar-display: none;
    --_inspector-display: none;
    grid-template: "header"
                   "canvas" 1fr
                   "footer"
                   / 1fr;
  }
}

:host(app-shell) ::slotted(*) {
  padding-inline: var(--padding-inline);
  padding-block: var(--padding-block);
  background-color: var(--surface);
  color: var(--text);
  display: block;
}

:host(app-shell) ::slotted(header) {
  grid-area: header;
}

:host(app-shell) ::slotted(sidebar-area) {
  display: var(--_sidebar-display, block);
  grid-area: sidebar;
}

:host(app-shell) ::slotted(canvas-area) {
  grid-area: canvas;
}

:host(app-shell) ::slotted(inspector-area) {
  display: var(--_inspector-display);
  grid-area: inspector;
}

:host(app-shell) ::slotted(footer) {
  grid-area: footer;
}

:host(card-grid) {
  --card-column-min-width: 15em;
}

:host(card-grid) section {
  grid-template-columns: repeat(auto-fill, minmax(var(--card-column-min-width), 1fr));
  grid-gap: var(--gap);
  padding-inline: var(--padding-inline);
  padding-block: var(--padding-block);
  display: grid;
  overflow-x: auto;
}

:host(card-grid) ::slotted(card-item) {
  padding-inline: var(--padding-inline);
  padding-block: var(--padding-block);
  color: var(--text);
  border: var(--border);
  background-color: var(--surface);
  border-radius: var(--border-radius);
  box-shadow: var(--box-shadow);
  display: block;
}

:host(card-grid[data-layout="flex"]) section {
  scroll-snap-type: inline mandatory;
  scroll-behavior: smooth;
  flex-flow: row;
  display: flex;
  overflow-x: auto;
}

:host(card-grid[data-layout="flex"]) ::slotted(card-item) {
  flex-shrink: 0;
  flex-basis: var(--card-column-min-width);
  scroll-snap-align: start;
}

:host(content-grid) {
  --padding-inline: 0px;
  --content-max-width: 80ch;
  --wide-width-max-width: 1000px;
}

:host(content-grid) ::slotted(*) {
  color: var(--text);
  background-color: var(--surface);
}

:host(content-grid) ::slotted(content-area) {
  --wide-width-size: calc((var(--wide-width-max-width)  - var(--content-max-width)) / 2);
  grid-template-columns: [full-width-start] minmax(var(--padding-inline), 1fr) [wide-width-start] minmax(0, var(--wide-width-size)) [content-width-start] min(100% - (var(--padding-inline) * 2), var(--content-max-width)) [content-width-end] minmax(0, var(--wide-width-size)) [wide-width-end] minmax(var(--padding-inline), 1fr) [full-width-end];
  display: grid;
}

:host(section-container) {
  --section-container-surface: var(--surface, unset);
  --_section-width: var(--section-width, 1200px);
  --_section-wide-width: var(--section-wide-width, 1000px);
  --_section-content-width: var(--section-content-width, 80ch);
  margin-inline: calc(var(--body-margin) * -1);
  background-color: var(--section-container-surface);
  padding-inline: var(--padding-inline);
  padding-block: var(--padding-block);
  display: block;
}

:host(section-container) section {
  color: var(--text);
  background-color: var(--surface);
  max-width: var(--_section-width);
  margin: auto;
}

:host(section-container) header {
  color: var(--text);
  background-color: var(--surface);
  max-width: var(--_section-width);
  margin: auto;
}

:host(section-container) footer {
  color: var(--text);
  background-color: var(--surface);
  max-width: var(--_section-width);
  margin: auto;
}

:host(section-container[data-width="content"]) section {
  max-width: var(--_section-content-width);
}

:host(section-container[data-width="content"]) header {
  max-width: var(--_section-content-width);
}

:host(section-container[data-width="content"]) footer {
  max-width: var(--_section-content-width);
}

:host(section-container[data-width="wide"]) section {
  max-width: var(--_section-wide-width);
}

:host(section-container[data-width="wide"]) header {
  max-width: var(--_section-wide-width);
}

:host(section-container[data-width="wide"]) footer {
  max-width: var(--_section-wide-width);
}

:host(resize-me) {
  --_resize-width: var(--resize-width, 60vw);
  --_resize-min-width: var(--resize-min-width, 12ch);
  --_resize-min-height: var(--resize-min-height, 120px);
  --_resize-height: var(--resize-height, 300px);
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  margin-left: auto;
  margin-right: auto;
  display: block;
}

:host(resize-me) article {
  resize: both;
  width: var(--_resize-width);
  min-width: var(--_resize-min-width);
  min-height: var(--_resize-min-height);
  height: var(--_resize-height);
  border: var(--border);
  display: grid;
  overflow: scroll;
}

:host(resize-me) footer {
  justify-content: flex-end;
  display: flex;
}
